classdef am_mbe

    properties (Constant)
        tiny      = 1E-6;          % precision of atomic coordinates
        r_0       = 2.81794032E-6; % [nm]       classical electron radius
        N_A       = 6.022141E23;   % [mol]      Avogadro's number
    end
    
    % pressure related things

    methods (Static)
        
        function [P]     = flux2pressure(J,T,m,th)
            %
            % P = flux2pressure(J,T,m,th) 
            % 
            % J     [atoms/cm^2-s]     flux 
            % P     [Torr]             pressure
            % T     [K]                temperature
            % m     [amu]              mass of atomic species
            % th    [deg]              molecular beam incident angle
            % 
            % Conversion factor 
            %   = 1 / ( cm^2 * s ) * sqrt( K * amu *  boltzman's constant) / Torr
            %   = 1.135674×10^-23 
            %
            % Eq 1 from C. D. Theis, J. Yeh, D. G. Schlom, M. E. Hawley,
            % and G. W. Brown, Thin Solid Films 325, 107 (1998). 
            %
            
            if nargin < 4
                th = 1; % assume normal flux if theta is not supplied
            end
            
            P = J / cosd(th) * sqrt(pi*m*T/8) * 1.135674E-23;
            
        end
        
        function [J]     = pressure2flux(P,T,m,th)
            %
            % J = pressure2flux(P,T,m,th) 
            % 
            % P     [Torr]             pressure
            % J     [atoms/cm^2-s]     flux 
            % T     [K]                temperature
            % m     [amu]              mass of atomic species
            % th    [deg]              molecular beam incident angle
            % 
            % Conversion factor 
            %   = 1 / ( cm^2 * s ) * sqrt( K * amu *  boltzman's constant) / Torr
            %   = 1.135674×10^-23 
            %
            % Eq 1 from C. D. Theis, J. Yeh, D. G. Schlom, M. E. Hawley,
            % and G. W. Brown, Thin Solid Films 325, 107 (1998). 
            %
            
            if nargin < 4
                th = 1; % assume normal flux if theta is not supplied
            end
            
            J = P * cosd(th) / sqrt(pi*m*T/8) / 1.135674E-23;
            
        end
        
        function [mfp]   = pressure2mfp(P,T,sigma)
            %
            % mfp = pressure2mfp(P,T,sigma)
            % 
            % P     [Torr]             pressure
            % T     [K]                temperature
            % sigma [cm^2]             scattering cross-section
            % mfp   [cm]               mean free path
            % 
            % Conversion factor
            %	= Boltzmann's constant * K / ( cm^2 * Torr ) / cm
            %   = 1.03557E-19 
            %
            % Eq 10.1 in A. Rockett, The Materials Science of
            % Semiconductors (Springer Science & Business Media, 2007). 
            %
            
            if nargin < 3 
                sigma = 1E-16; % assume a typical values if sigma is not supplied
            end
            
            mfp = T / ( sqrt(2) * sigma * P ) * 1.03557E-19;
            
        end
        
    end
    
    % mbe related things
    
    methods (Static)
        
        function [Instances] = read_mbe_log(flog)
            % 
            Instances.date = strrep(strrep(strtrim(flog),'.log',''),'.','/');
            % timestep [s]
            fid = fopen(flog);
                % buffer header
                b = strtrim(fgetl(fid));
                % split header based on tabs
                h = strsplit(b,'\t');
                % trim headers
                h = strtrim(h);
                % load data
                d = fscanf(fid,'%f');
                %
            fclose(fid);
            % create array
            nhs = numel(h);
            d = reshape(d,nhs,[]).';
            % create structure
            Instances.time=seconds(d(:,1));
            for i = 2:nhs
                eval(sprintf('%s=d(:,%i);',h{i},i)); 
            end
        end
        
    end
    
    % RHEED related things
    
    methods (Static)
        
        function           demo_rheed_oscillations
            clear;clc; import am_lib.* am_mbe.*

            fname = 'ABM170803.txt'; domain = [00,1000];
            switch 'txt'
                case 'txt'
                    % MUST SPECIFY number of ROIs manually
                    nrois = 3;
                    fid = fopen(fname); d=fscanf(fid,'%f'); fclose(fid);
                    d = reshape(d,2,[],nrois);
                    for i = 1:nrois; [t(:,i),y(:,i)] = deal(d(1,:,i).',d(2,:,i).'); end
                case 'xlsx'
                    d = xlsread(fname); nrois = (size(d,2)-1);
                    t = repmat(d(:,1),1,nrois);
                    y = d(:,2:end);
            end
            % exclude domain
            ex_ = and(t(:,1)>min(domain),t(:,1)<max(domain)); t=t(ex_,:); y=y(ex_,:);
            % analyze
            analyze_rheed_oscillations_with_fft(t,y);
            % plot
            plot(t,sin(2*pi*(t-43)/19.04)); axis tight
        end
        
        function           analyze_rheed_oscillations_with_fft(t,y)
            import am_lib.*
            % count number of scans
            nys=size(y,2);
            % smooth
            g_ = gaussw_(30,2); g_=g_./sum(g_);
            for i = 1:nys; y(:,i) = conv(y(:,i),g_,'same'); end
            % subtract mean
            y=y-mean(y,1);
            % apply tukey filter
            nts = size(t,1); g_ = tukeyw_(nts,0.96);
            y = y .* g_;
            % plot power spectrum
            plot_power_spectrum_(t,y)
        end
        
    end
    
    % x-ray related things
    
    methods (Static)
        
        % demos
        
        function           demo_simulate_xrr()
            %
            % R = simulate_xray_reflectivity(layer,th,hv,thickness,filling,roughness)
            % 
            % layers [struct]           layers
            %    layer(i).mass_density      [g/cm^3]        mass density
            %    layer(i).Z                 [Z]             atomic species
            %    layer(i).nspecies     [atoms/u.c.]    number of atoms per formula unit
            % th        [deg]           angles
            % thickness [nm]            thickness
            % filling   [unitless]      multiplies density
            % roughness [nm]            inteface roughness
            % 
            
            import am_mbe.* am_dft.* am_lib.*
            
            % define photon energy and angles
            hv = get_atomic_emission_line_energy(get_atomic_number('Cu'),'kalpha1');
            th = [0:0.005:4].'; k = get_kz(th,hv);

            % define material (species, stoichiometry [per f.u.], density)
            layer(1) = create_xrr_cell({'Sr','Ti','O'},[1,1,3],4.81);
            layer(2) = create_xrr_cell({'Al','O'},[2,3],3.95);

            thickness = [50 1E3];
            roughness = [1 2]*1;
            filling   = [1.2 0.8];

            % get dielectric contributions
            nlayers = numel(layer);
            for i = 1:nlayers; xray_refractive_index(:,i) = get_xray_refractive_index(layer(i), hv, k); end

            % simulate and analyze
            % x = [thickness,filling,roughness,I0,background]
            nlayers = numel(layer);
            simulate_ = @(x,method) simulate_xrr(...
                xray_refractive_index, th, hv,...
                x(0*nlayers+[1:nlayers]),...
                x(1*nlayers+[1:nlayers]),...
                x(2*nlayers+[1:nlayers]),...
                x(3*nlayers+1),method)*x(end-1)+x(end);
            R_transfer = simulate_([thickness,filling,roughness,10000,1,6E-6],1);
            R_parratt  = simulate_([thickness,filling,roughness,10000,1,6E-6],2);

            % load demo data
            [demo_th,demo_I] = load_demo_data();
            
            % exclude above noise floor
            ex_ = th<1; ex_(ex_) = th(ex_)>0;
            analyze_xrr_with_fft(th(ex_),R_parratt(ex_),hv)
            subplot(3,1,1); hold on; plot(th(ex_),R_transfer(ex_),'.r' ,demo_th,demo_I,'-k');
            fprintf('largest percentual difference between methods: %f %%\n',max(abs(R_parratt(ex_)-R_transfer(ex_))./R_parratt(ex_))*100)
            
            function [th,I] = load_demo_data()
                data = [ ...
                0.0000000E0,9.9602219E5; 2.5200001E1,9.9406744E5; 5.0400002E1,9.9211394E5; 7.5599998E1,9.9015906E5; 1.0080000E2,9.8820038E5; 1.2600000E2,9.8623506E5; 1.5120000E2,9.8426063E5;
                1.7639999E2,9.8227419E5; 2.0160001E2,9.8027300E5; 2.2680000E2,9.7825406E5; 2.5200000E2,9.7621438E5; 2.7720001E2,9.7415069E5; 3.0239999E2,9.7205963E5; 3.2760001E2,9.6993744E5;
                3.5279999E2,9.6778038E5; 3.7800000E2,9.6558419E5; 4.0320001E2,9.6334438E5; 4.2839999E2,9.6105600E5; 4.5360001E2,9.5871375E5; 4.7879999E2,9.5631163E5; 5.0400000E2,9.5384319E5;
                5.2920001E2,9.5130113E5; 5.5440002E2,9.4867731E5; 5.7959998E2,9.4596256E5; 6.0479999E2,9.4314663E5; 6.3000000E2,9.4021763E5; 6.5520001E2,9.3716213E5; 6.8040002E2,9.3396450E5;
                7.0559998E2,9.3060669E5; 7.3079999E2,9.2706731E5; 7.5600000E2,9.2332138E5; 7.8120001E2,9.1933869E5; 8.0640002E2,9.1508313E5; 8.3159998E2,9.1051038E5; 8.5679999E2,9.0556569E5;
                8.8200000E2,9.0018038E5; 9.0720001E2,8.9426663E5; 9.3240002E2,8.8771000E5; 9.5759998E2,8.8035863E5; 9.8279999E2,8.7200469E5; 1.0080000E3,8.6235481E5; 1.0332000E3,8.5097900E5;
                1.0584000E3,8.3721656E5; 1.0836000E3,8.1999081E5; 1.1088000E3,7.9741481E5; 1.1340000E3,7.6587288E5; 1.1592000E3,7.1770850E5; 1.1844000E3,6.3554994E5; 1.2096000E3,4.8724894E5;
                1.2348000E3,3.0097491E5; 1.2600000E3,2.5470106E5; 1.2852000E3,2.5348736E5; 1.3104000E3,1.9355923E5; 1.3356000E3,1.1464320E5; 1.3608000E3,7.5343664E4; 1.3860000E3,8.2696367E4;
                1.4112000E3,9.9931906E4; 1.4364000E3,1.0068584E5; 1.4616000E3,8.2588813E4; 1.4868000E3,5.6386391E4; 1.5120000E3,3.5250820E4; 1.5372000E3,2.6669520E4; 1.5624000E3,2.9223912E4;
                1.5876000E3,3.6005441E4; 1.6128000E3,4.0376988E4; 1.6380000E3,3.9201746E4; 1.6632000E3,3.2974043E4; 1.6884000E3,2.4424703E4; 1.7136000E3,1.6769609E4; 1.7388000E3,1.2223693E4;
                1.7640000E3,1.1256729E4; 1.7892000E3,1.2792750E4; 1.8144000E3,1.5053983E4; 1.8396000E3,1.6468977E4; 1.8648000E3,1.6221836E4; 1.8900000E3,1.4351235E4; 1.9152000E3,1.1520400E4;
                1.9404000E3,8.6336299E3; 1.9656000E3,6.4587593E3; 1.9908000E3,5.3779624E3; 2.0160000E3,5.3290503E3; 2.0412000E3,5.9203696E3; 2.0663999E3,6.6381089E3; 2.0916001E3,7.0478950E3;
                2.1168000E3,6.9214351E3; 2.1420000E3,6.2656250E3; 2.1672000E3,5.2697080E3; 2.1923999E3,4.2063125E3; 2.2176001E3,3.3267551E3; 2.2428000E3,2.7841042E3; 2.2680000E3,2.6027776E3;
                2.2932000E3,2.6952451E3; 2.3183999E3,2.9109614E3; 2.3436001E3,3.0951553E3; 2.3688000E3,3.1368599E3; 2.3940000E3,2.9937263E3; 2.4192000E3,2.6911492E3; 2.4443999E3,2.3013840E3;
                2.4696001E3,1.9128689E3; 2.4948000E3,1.6006639E3; 2.5200000E3,1.4064708E3; 2.5452000E3,1.3322922E3; 2.5703999E3,1.3470046E3; 2.5956001E3,1.4014202E3; 2.6208000E3,1.4457609E3;
                2.6460000E3,1.4439822E3; 2.6712000E3,1.3814325E3; 2.6963999E3,1.2649659E3; 2.7216001E3,1.1169402E3; 2.7468000E3,9.6596021E2; 2.7720000E3,8.3758386E2; 2.7972000E3,7.4760431E2;
                2.8223999E3,6.9931409E2; 2.8476001E3,6.8477631E2; 2.8728000E3,6.8900012E2; 2.8980000E3,6.9531244E2; 2.9232000E3,6.9020856E2; 2.9483999E3,6.6643958E2; 2.9736001E3,6.2381787E2;
                2.9988000E3,5.6794720E2; 3.0240000E3,5.0761008E2; 3.0492000E3,4.5177130E2; 3.0743999E3,4.0708203E2; 3.0996001E3,3.7646732E2; 3.1248000E3,3.5897998E2; 3.1500000E3,3.5072623E2;
                3.1752000E3,3.4641602E2; 3.2003999E3,3.4100558E2; 3.2256001E3,3.3097546E2; 3.2508000E3,3.1496945E2; 3.2760000E3,2.9374313E2; 3.3012000E3,2.6956308E2; 3.3263999E3,2.4531737E2;
                3.3516001E3,2.2362614E2; 3.3768000E3,2.0618672E2; 3.4020000E3,1.9348260E2; 3.4272000E3,1.8486545E2; 3.4523999E3,1.7891942E2; 3.4776001E3,1.7395996E2; 3.5028000E3,1.6851141E2;
                3.5280000E3,1.6164270E2; 3.5532000E3,1.5309998E2; 3.5783999E3,1.4323943E2; 3.6036001E3,1.3281506E2; 3.6288000E3,1.2270347E2; 3.6540000E3,1.1364841E2; 3.6792000E3,1.0608781E2;
                3.7043999E3,1.0009192E2; 3.7296001E3,9.5408104E1; 3.7548000E3,9.1580368E1; 3.7800000E3,8.8098938E1; 3.8052000E3,8.4535820E1; 3.8303999E3,8.0634247E1; 3.8556001E3,7.6337799E1;
                3.8808000E3,7.1763252E1; 3.9060000E3,6.7134674E1; 3.9312000E3,6.2702984E1; 3.9563999E3,5.8674198E1; 3.9816001E3,5.5162865E1; 4.0068000E3,5.2177746E1; 4.0320000E3,4.9637157E1;
                4.0572000E3,4.7404339E1; 4.0823999E3,4.5330120E1; 4.1076001E3,4.3290573E1; 4.1327998E3,4.1211235E1; 4.1580000E3,3.9074284E1; 4.1832002E3,3.6910229E1; 4.2083999E3,3.4779194E1;
                4.2336001E3,3.2748516E1; 4.2587998E3,3.0873001E1; 4.2840000E3,2.9182280E1; 4.3092002E3,2.7676987E1; 4.3343999E3,2.6333038E1; 4.3596001E3,2.5111279E1; 4.3847998E3,2.3969055E1;
                4.4100000E3,2.2870434E1; 4.4352002E3,2.1792774E1; 4.4603999E3,2.0728746E1; 4.4856001E3,1.9684202E1; 4.5107998E3,1.8673252E1; 4.5360000E3,1.7712330E1; 4.5612002E3,1.6814917E1;
                4.5863999E3,1.5988104E1; 4.6116001E3,1.5231474E1; 4.6367998E3,1.4538093E1; 4.6620000E3,1.3896948E1; 4.6872002E3,1.3295928E1; 4.7123999E3,1.2724496E1; 4.7376001E3,1.2175458E1;
                4.7627998E3,1.1645569E1; 4.7880000E3,1.1135073E1; 4.8132002E3,1.0646506E1; 4.8383999E3,1.0183206E1; 4.8636001E3,9.7479525E0; 4.8887998E3,9.3420544E0; 4.9140000E3,8.9650078E0;
                4.9392002E3,8.6146774E0; 4.9643999E3,8.2878704E0; 4.9896001E3,7.9810562E0; 5.0147998E3,7.6910324E0; 5.0400000E3,7.4153900E0; 5.0652002E3,7.1526937E0; 5.0903999E3,6.9024029E0;
                5.1156001E3,6.6646032E0; 5.1407998E3,6.4396524E0; 5.1660000E3,6.2278514E0; 5.1912002E3,6.0292034E0; 5.2163999E3,5.8433146E0; 5.2416001E3,5.6694155E0; 5.2667998E3,5.5064821E0;
                5.2920000E3,5.3534002E0; 5.3172002E3,5.2091208E0; 5.3423999E3,5.0727758E0; 5.3676001E3,4.9437304E0; 5.3927998E3,4.8215756E0; 5.4180000E3,4.7060695E0; 5.4432002E3,4.5970626E0;
                5.4683999E3,4.4944181E0; 5.4936001E3,4.3979559E0; 5.5187998E3,4.3074198E0; 5.5440000E3,4.2224808E0; 5.5692002E3,4.1427555E0; 5.5943999E3,4.0678444E0; 5.6196001E3,3.9973626E0;
                5.6447998E3,3.9309685E0; 5.6700000E3,3.8683770E0; 5.6952002E3,3.8093600E0; 5.7203999E3,3.7537365E0; 5.7456001E3,3.7013547E0; 5.7707998E3,3.6520772E0; 5.7960000E3,3.6057653E0;
                5.8212002E3,3.5622721E0; 5.8463999E3,3.5214400E0; 5.8716001E3,3.4831052E0; 5.8967998E3,3.4471033E0; 5.9220000E3,3.4132755E0; 5.9472002E3,3.3814759E0; 5.9723999E3,3.3515732E0;
                5.9976001E3,3.3234522E0; 6.0227998E3,3.2970114E0; 6.0480000E3,3.2721596E0; 6.0732002E3,3.2488127E0; 6.0983999E3,3.2268908E0; 6.1236001E3,3.2063153E0; 6.1487998E3,3.1870089E0;
                6.1740000E3,3.1688948E0; 6.1992002E3,3.1518993E0; 6.2243999E3,3.1359518E0; 6.2496001E3,3.1209853E0; 6.2747998E3,3.1069388E0; 6.3000000E3,3.0937557E0; 6.3252002E3,3.0813847E0;
                6.3503999E3,3.0697780E0; 6.3756001E3,3.0588911E0; 6.4007998E3,3.0486822E0; 6.4260000E3,3.0391119E0; 6.4512002E3,3.0301421E0; 6.4763999E3,3.0217359E0; 6.5016001E3,3.0138590E0;
                6.5267998E3,3.0064785E0; 6.5520000E3,2.9995630E0; 6.5772002E3,2.9930837E0; 6.6023999E3,2.9870136E0; 6.6276001E3,2.9813275E0; 6.6527998E3,2.9760020E0; 6.6780000E3,2.9710147E0;
                6.7032002E3,2.9663455E0; 6.7283999E3,2.9619749E0; 6.7536001E3,2.9578843E0; 6.7787998E3,2.9540565E0; 6.8040000E3,2.9504750E0; 6.8292002E3,2.9471245E0; 6.8543999E3,2.9439900E0;
                6.8796001E3,2.9410584E0; 6.9047998E3,2.9383166E0; 6.9300000E3,2.9357526E0; 6.9552002E3,2.9333553E0; 6.9803999E3,2.9311144E0; 7.0056001E3,2.9290197E0; 7.0307998E3,2.9270620E0;
                7.0560000E3,2.9252331E0; 7.0812002E3,2.9235241E0; 7.1063999E3,2.9219279E0; 7.1316001E3,2.9204371E0; 7.1567998E3,2.9190447E0; 7.1820000E3,2.9177449E0; 7.2072002E3,2.9165311E0;
                7.2323999E3,2.9153981E0; 7.2576001E3,2.9143407E0; 7.2827998E3,2.9133539E0; 7.3080000E3,2.9124331E0; 7.3332002E3,2.9115741E0; 7.3583999E3,2.9107728E0; 7.3836001E3,2.9100256E0;
                7.4087998E3,2.9093287E0; 7.4340000E3,2.9086790E0; 7.4592002E3,2.9080734E0; 7.4843999E3,2.9075089E0; 7.5096001E3,2.9069827E0; 7.5347998E3,2.9064925E0; 7.5600000E3,2.9060359E0;
                7.5852002E3,2.9056103E0; 7.6103999E3,2.9052141E0; 7.6356001E3,2.9048452E0; 7.6607998E3,2.9045017E0; 7.6860000E3,2.9041817E0; 7.7112002E3,2.9038839E0; 7.7363999E3,2.9036069E0;
                7.7616001E3,2.9033492E0; 7.7867998E3,2.9031093E0; 7.8120000E3,2.9028862E0; 7.8372002E3,2.9026785E0; 7.8623999E3,2.9024856E0; 7.8876001E3,2.9023061E0; 7.9127998E3,2.9021392E0;
                7.9380000E3,2.9019842E0; 7.9632002E3,2.9018400E0; 7.9883999E3,2.9017062E0; 8.0136001E3,2.9015818E0; 8.0387998E3,2.9014661E0; 8.0640000E3,2.9013588E0; 8.0892002E3,2.9012592E0;
                8.1143999E3,2.9011667E0; 8.1396001E3,2.9010806E0; 8.1647998E3,2.9010010E0; 8.1900000E3,2.9009268E0; 8.2152002E3,2.9008582E0; 8.2404004E3,2.9007945E0; 8.2655996E3,2.9007354E0;
                8.2907998E3,2.9006805E0; 8.3160000E3,2.9006298E0; 8.3412002E3,2.9005826E0; 8.3664004E3,2.9005389E0; 8.3915996E3,2.9004984E0; 8.4167998E3,2.9004610E0; 8.4420000E3,2.9004261E0;
                8.4672002E3,2.9003940E0; 8.4924004E3,2.9003642E0; 8.5175996E3,2.9003365E0; 8.5427998E3,2.9003110E0; 8.5680000E3,2.9002872E0; 8.5932002E3,2.9002652E0; 8.6184004E3,2.9002450E0;
                8.6435996E3,2.9002264E0; 8.6687998E3,2.9002090E0; 8.6940000E3,2.9001927E0; 8.7192002E3,2.9001780E0; 8.7444004E3,2.9001641E0; 8.7695996E3,2.9001515E0; 8.7947998E3,2.9001398E0;
                8.8200000E3,2.9001288E0; 8.8452002E3,2.9001188E0; 8.8704004E3,2.9001095E0; 8.8955996E3,2.9001009E0; 8.9207998E3,2.9000931E0; 8.9460000E3,2.9000859E0; 8.9712002E3,2.9000790E0;
                8.9964004E3,2.9000728E0; 9.0215996E3,2.9000671E0; 9.0467998E3,2.9000618E0; 9.0720000E3,2.9000568E0; 9.0972002E3,2.9000523E0; 9.1224004E3,2.9000483E0; 9.1475996E3,2.9000444E0;
                9.1727998E3,2.9000409E0; 9.1980000E3,2.9000375E0; 9.2232002E3,2.9000347E0; 9.2484004E3,2.9000318E0; 9.2735996E3,2.9000292E0; 9.2987998E3,2.9000268E0; 9.3240000E3,2.9000247E0;
                9.3492002E3,2.9000227E0; 9.3744004E3,2.9000208E0; 9.3995996E3,2.9000192E0; 9.4247998E3,2.9000175E0; 9.4500000E3,2.9000161E0; 9.4752002E3,2.9000149E0; 9.5004004E3,2.9000137E0;
                9.5255996E3,2.9000125E0; 9.5507998E3,2.9000115E0; 9.5760000E3,2.9000106E0; 9.6012002E3,2.9000096E0; 9.6264004E3,2.9000089E0; 9.6515996E3,2.9000082E0; 9.6767998E3,2.9000075E0;
                9.7020000E3,2.9000068E0; 9.7272002E3,2.9000063E0; 9.7524004E3,2.9000058E0; 9.7775996E3,2.9000053E0; 9.8027998E3,2.9000049E0; 9.8280000E3,2.9000044E0; 9.8532002E3,2.9000041E0;
                9.8784004E3,2.9000037E0; 9.9035996E3,2.9000034E0; 9.9287998E3,2.9000032E0; 9.9540000E3,2.9000030E0; 9.9792002E3,2.9000027E0; 1.0004400E4,2.9000025E0];
                th = data(:,1)/3600; I = data(:,2)./max(data(:,2)); 
            end
        end
 
        function           demo_plot_rsm()
            clear;clc;import am_mbe.*
            hv = get_atomic_emission_line_energy(get_atomic_number('Cu'),'kalpha1');
            lambda = get_photon_wavelength(hv);
            d = xrdmlread('STO_103_wa_test_rsm.xrdml');

            data= d.data;
            th2 = d.Theta2;
            w   = d.Omega;
            % w = repmat(d.Omega,1,size(th2,2));
            
            % smooth
            N   = 10; alpha = 5;
            g   = gaussw_(N,alpha).*gaussw_(N,alpha).';
            data= conv2(log(data+min(data(data(:)>0))),g,'same');
            
            % convert to angular units
            kz_ = @(w,th2,lambda)  2/(lambda).*sind(th2/2).*cosd(th2/2-w);
            kx_ = @(w,th2,lambda)  2/(lambda).*sind(th2/2).*sind(th2/2-w);
            kz = kz_(w,th2,lambda); kx = kx_(w,th2,lambda);

            figure(1); set(gcf,'color','w');
            contourf(kx,kz,data,'edgecolor','none');
            daspect([1 1 1]);
            colormap(parula(100))

            % hk= kx * 0.4212/norm([0 0 3]);
            % l = kz * 0.4212/norm([1 1 0]);
            % contourf(hk,l,log(d.data));
        end
        
        function           demo_plot_rsm_wide_angle()
            clear;clc;import am_mbe.* am_lib.* am_dft.*
            hv = get_atomic_emission_line_energy(get_atomic_number('Cu'),'kalpha1');
            
            hold on; plot_xrd_diffraction_plane_accessible(hv); hold off;

            [uc,~,~]=load_cell('material','SrTiO3');
            [fbs,ibs] = get_bragg(uc,hv);
            h = plot_ibs_2D(ibs,'linewidth',1);
            h = plot_fbs_2D(fbs,[0 0 1],[1 1 0],'linewidth',2);
        end
        
        function           demo_plot_xrr_diffuse()
            clear;clc;import am_mbe.* am_dft.* am_lib.*
            cd('/Users/lenzinho/My Documents/Academic/Cornell/Research/XRD/ABM171001-15');
            hv = get_atomic_emission_line_energy(get_atomic_number('Cu'),'kalpha1');
            lambda = get_photon_wavelength(hv);
            d = xrdmlread('ABM171001-15_diffuse.xrdml');

            data= d.data;
            th2 = d.Theta2;
            w   = d.Omega;

            % smooth
            % N   = 10; alpha = 5;
            % g   = gaussw_(N,alpha).*gaussw_(N,alpha).';
            % data= conv2(log(data+min(data(data(:)>0))),g,'same');
            data(d.data==0)=min(data(data(:)~=0));
            data = log(data); 

            % convert to angular units
            kz_ = @(w,th2,lambda)  2/(lambda).*sind(th2/2).*cosd(th2/2-w);
            kx_ = @(w,th2,lambda) -2/(lambda).*sind(th2/2).*sind(th2/2-w);
            kz = kz_(w,th2,lambda); kx = kx_(w,th2,lambda);

            figure(1); set(gcf,'color','w');
            surf(kx,kz,data,'edgecolor','none');
            % contourf(kx,kz,data,500,'edgecolor','none','linewidth',0.01);
            % daspect([1 1 1]);
            % colormap(parula(100));view([0 0 1]);

            caxis([5 11])
            colormap(color_(100,'magma'))
        end
        
        function           demo_w2th_fit()
            %
            clear; clc; import am_mbe.*
            hv = get_atomic_emission_line_energy(get_atomic_number('Cu'),'kalpha1');
            d  = xrdmlread('~/Downloads/ZW628_70minPbZr0p3Ti0p7O3_onSrTiO3_tth.xrdml');
            % semilogy(d.Theta2,d.data)
            domain = [18,25];
            [d,th2] = analyze_w2th_with_fit(d.Theta2,d.data,hv,domain);
        end
        
        function           demo_xrr_fit()
            
            clear; clc; import am_mbe.* am_dft.*
           
            % define photon energy and angles
            hv = get_atomic_emission_line_energy(get_atomic_number('Cu'),'kalpha1');
            
            % load data
            % fname = './0.8W_on_Si.txt'; fid = fopen(fname,'r'); x = fscanf(fid,'%f %f\n'); fclose(fid);
            % x = load_Ta2O5_on_Si();
            x = load_W_on_Si();
            th = x(1:2:end); intensity = x(2:2:end);
          
            % define material (species, stoichiometry, density)
            layer(1) = create_xrr_cell({'W'},[1],19.3);
            %layer(1) = create_xrr_cell({'Ta','O'},[2,5],8.2);
            layer(2) = create_xrr_cell({'Si'},[1],2.53);
            
            isfixed = [  0   1   0   0   0   0  1   0    0];
            lb      = [0.1 1E8 0.6 0.6 0.1 0.1  0 1E4 1E-8];
            ub      = [100 1E8 2.0 2.0   3   3  0 1E8 1E+2];
            x0      = mean([lb;ub]);
            
            x = analyze_xrr_with_fit(th,intensity,hv,layer,x0,ub,lb,isfixed);
            
            function x = load_Ta2O5_on_Si()
               x = [ ...
                         0      1e+06      0.005     999146       0.01     998293      0.015     997440       0.02     996588      0.025     995735 ... 
                      0.03     994883      0.035     994030       0.04     993177      0.045     992324       0.05     991470      0.055     990615 ... 
                      0.06     989759      0.065     988901       0.07     988043      0.075     987183       0.08     986322      0.085     985458 ... 
                      0.09     984593      0.095     983726        0.1     982856      0.105     981984       0.11     981109      0.115     980232 ... 
                      0.12     979351      0.125     978467       0.13     977580      0.135     976690       0.14     975795      0.145     974897 ... 
                      0.15     973995      0.155     973088       0.16     972177      0.165     971261       0.17     970340      0.175     969414 ... 
                      0.18     968482      0.185     967545       0.19     966601      0.195     965652        0.2     964696      0.205     963734 ... 
                      0.21     962765      0.215     961788       0.22     960804      0.225     959812       0.23     958813      0.235     957804 ... 
                      0.24     956787      0.245     955761       0.25     954726      0.255     953680       0.26     952625      0.265     951559 ... 
                      0.27     950482      0.275     949394       0.28     948294      0.285     947182       0.29     946057      0.295     944918 ... 
                       0.3     943767      0.305     942600       0.31     941419      0.315     940223       0.32     939011      0.325     937781 ... 
                      0.33     936535      0.335     935271       0.34     933987      0.345     932685       0.35     931361      0.355     930017 ... 
                      0.36     928651      0.365     927261       0.37     925847      0.375     924408       0.38     922943      0.385     921450 ... 
                      0.39     919928      0.395     918376        0.4     916793      0.405     915176       0.41     913525      0.415     911837 ... 
                      0.42     910111      0.425     908344       0.43     906535      0.435     904680       0.44     902779      0.445     900827 ... 
                      0.45     898823      0.455     896762       0.46     894643      0.465     892460       0.47     890210      0.475     887888 ... 
                      0.48     885490      0.485     883011       0.49     880445      0.495     877785        0.5     875025      0.505     872157 ... 
                      0.51     869172      0.515     866060       0.52     862812      0.525     859414       0.53     855854      0.535     852116 ... 
                      0.54     848182      0.545     844033       0.55     839646      0.555     834993       0.56     830045      0.565     824765 ... 
                      0.57     819112      0.575     813034       0.58     806473      0.585     799358       0.59     791601      0.595     783097 ... 
                       0.6     773718      0.605     763303       0.61     751651      0.615     738511       0.62     723566      0.625     706409 ... 
                      0.63     686527      0.635     663263       0.64     635799      0.645     603131       0.65     564102      0.655     517518 ... 
                      0.66     462476      0.665     399012       0.67     329135      0.675     257916       0.68     193555      0.685     145094 ... 
                      0.69     118147      0.695     111885        0.7     120069      0.705     134798       0.71     149628      0.715     160617 ... 
                      0.72     165973      0.725     165326       0.73     159104      0.735     148156       0.74     133543      0.745     116425 ... 
                      0.75      98002      0.755    79450.5       0.76    61863.5      0.765    46179.1       0.77    33114.6      0.775    23116.7 ... 
                      0.78      16342      0.785      12673       0.79    11765.4      0.795    13115.8        0.8    16137.1      0.805    20226.9 ... 
                      0.81    24821.4      0.815    29432.1       0.82    33664.6      0.825    37224.8       0.83    39914.8      0.835    41623.2 ... 
                      0.84    42313.4      0.845      42010       0.85    40786.3      0.855    38752.5       0.86    36045.2      0.865    32817.5 ... 
                      0.87    29230.8      0.875    25446.3       0.88    21618.7      0.885    17890.2       0.89    14385.1      0.895    11206.3 ... 
                       0.9    8432.61      0.905     6117.7       0.91    4289.95      0.915    2953.91       0.92    2092.67      0.925    1671.08 ... 
                      0.93    1639.49      0.935    1937.82       0.94    2499.56      0.945    3255.56       0.95    4137.44      0.955    5080.38 ... 
                      0.96    6025.44      0.965     6921.2       0.97    7724.82      0.975    8402.64       0.98    8930.28      0.985    9292.35 ... 
                      0.99    9481.93      0.995    9499.74          1    9353.17      1.005    9055.28       1.01    8623.58      1.015    8078.99 ... 
                      1.02    7444.65      1.025     6744.9       1.03    6004.25      1.035    5246.55       1.04    4494.18      1.045    3767.39 ... 
                      1.05    3083.84      1.055     2458.2       1.06    1901.96      1.065    1423.28       1.07    1027.09      1.075    715.193 ... 
                      1.08    486.523      1.085    337.454       1.09    262.183      1.095    253.137        1.1    301.407      1.105    397.182 ... 
                      1.11    530.162      1.115    689.949       1.12    866.399      1.125    1049.92       1.13    1231.74      1.135    1404.08 ... 
                      1.14    1560.32      1.145    1695.09       1.15    1804.28      1.155    1885.09       1.16    1935.93      1.165     1956.4 ... 
                      1.17    1947.11      1.175    1909.65       1.18    1846.35      1.185     1760.2       1.19    1654.66      1.195    1533.52 ... 
                       1.2    1400.73      1.205    1260.28       1.21    1116.09      1.215     971.85       1.22    830.964      1.225    696.463 ... 
                      1.23    570.947      1.235    456.544       1.24    354.892      1.245    267.131       1.25     193.92      1.255    135.454 ... 
                      1.26     91.506      1.265     61.471       1.27    44.4165      1.275     39.141       1.28    44.2332      1.285    58.1324 ... 
                      1.29    79.1868      1.295     105.71        1.3     136.03      1.305     168.54       1.31    201.734      1.315    234.241 ... 
                      1.32    264.851      1.325    292.534       1.33    316.454      1.335    335.968       1.34    350.634      1.345    360.196 ... 
                      1.35    364.579      1.355    363.871       1.36    358.307      1.365    348.244       1.37    334.145      1.375    316.551 ... 
                      1.38    296.061      1.385    273.308       1.39    248.939      1.395    223.593        1.4    197.888      1.405    172.402 ... 
                      1.41    147.662      1.415     124.13       1.42    102.205      1.425    82.2064       1.43     64.381      1.435    48.8982 ... 
                      1.44    35.8537      1.445    25.2734       1.45    17.1186      1.455    11.2931       1.46    7.65097      1.465    6.00456 ... 
                      1.47    6.13365      1.475    7.79408       1.48    10.7265      1.485    14.6644       1.49    19.3422      1.495    24.5017 ... 
                       1.5    29.8986      1.505    35.3075       1.51    40.5259      1.515    45.3775       1.52    49.7146      1.525    53.4189 ... 
                      1.53    56.4019      1.535    58.6045       1.54    59.9959      1.545    60.5712       1.55    60.3495      1.555    59.3709 ... 
                      1.56    57.6935      1.565    55.3898       1.57    52.5438      1.575    49.2475       1.58    45.5974      1.585     41.692 ... 
                      1.59    37.6283      1.595    33.5001        1.6    29.3952      1.605    25.3937       1.61    21.5669      1.615    17.9758 ... 
                      1.62    14.6707      1.625    11.6909       1.63    9.06425      1.635    6.80793       1.64     4.9287      1.645    3.42377 ... 
                      1.65    2.28168      1.655    1.48342       1.66    1.00357      1.665   0.811538       1.67    0.87283      1.675    1.15025 ... 
                      1.68    1.60512      1.685    2.19836       1.69    2.89152      1.695    3.64771        1.7    4.43235      1.705    5.21381 ... 
                      1.71    5.96396      1.715    6.65852       1.72    7.27729      1.725    7.80428       1.73    8.22767      1.735    8.53975 ... 
                      1.74    8.73667      1.745    8.81816       1.75     8.7872      1.755    8.64961       1.76     8.4136      1.765    8.08937 ... 
                      1.77    7.68859      1.775    7.22398       1.78    6.70889      1.785    6.15686       1.79    5.58127      1.795    4.99499 ... 
                       1.8    4.41012      1.805    3.83772       1.81    3.28766      1.815    2.76843       1.82    2.28708      1.825     1.8492 ... 
                      1.83    1.45884      1.835    1.11864       1.84   0.829819      1.845    0.59232       1.85    0.40492      1.855   0.265362 ... 
                      1.86   0.170516      1.865   0.116534       1.87   0.099012      1.875   0.113154       1.88   0.153921      1.885   0.216182 ... 
                      1.89   0.294847      1.895   0.384985        1.9   0.481932      1.905   0.581373       1.91   0.679417      1.915    0.77265 ... 
                      1.92   0.858164      1.925   0.933587       1.93   0.997077      1.935    1.04732       1.94     1.0835      1.945    1.10529 ... 
                      1.95    1.11277      1.955    1.10642       1.96    1.08706      1.965    1.05575       1.97    1.01381      1.975   0.962722 ... 
                      1.98   0.904052      1.985   0.839445       1.99    0.77055      1.995   0.698985          2   0.626296      2.005   0.553924 ... 
                      2.01   0.483183      2.015   0.415234       2.02   0.351074      2.025   0.291525       2.03   0.237231      2.035    0.18866 ... 
                      2.04   0.146109      2.045   0.109712       2.05   0.079453      2.055   0.055181       2.06   0.036629      2.065   0.023426 ... 
                      2.07   0.015124      2.075   0.011209       2.08   0.011124      2.085   0.014286       2.09     0.0201      2.095    0.02798 ... 
                       2.1   0.037355      2.105   0.047686       2.11   0.058475      2.115   0.069271       2.12   0.079676      2.125    0.08935 ... 
                      2.13   0.098014      2.135   0.105446       2.14   0.111485      2.145   0.116026       2.15   0.119018      2.155   0.120456 ... 
                      2.16    0.12038      2.165   0.118866       2.17   0.116023      2.175   0.111984       2.18   0.106902      2.185   0.100942 ... 
                      2.19   0.094278      2.195   0.087086        2.2   0.079539      2.205   0.071803       2.21   0.064035      2.215   0.056379 ... 
                      2.22   0.048962      2.225   0.041896       2.23   0.035274      2.235    0.02917       2.24   0.023642      2.245   0.018726 ... 
                      2.25   0.014445      2.255   0.010802       2.26    0.00779      2.265   0.005385       2.27   0.003555      2.275   0.002258 ... 
                      2.28   0.001444      2.285   0.001059       2.29   0.001046      2.295   0.001345        2.3   0.001896      2.305   0.002642 ... 
                      2.31   0.003526      2.315   0.004496       2.32   0.005506      2.325   0.006511       2.33   0.007475      2.335   0.008366 ... 
                      2.34   0.009159      2.345   0.009834       2.35   0.010378      2.355   0.010781       2.36   0.011039      2.365   0.011153 ... 
                      2.37   0.011129      2.375   0.010972       2.38   0.010695      2.385    0.01031       2.39   0.009832      2.395   0.009276 ... 
                       2.4   0.008658      2.405   0.007993       2.41   0.007299      2.415    0.00659       2.42    0.00588      2.425   0.005181 ... 
                      2.43   0.004506      2.435   0.003863       2.44   0.003261      2.445   0.002706       2.45   0.002203      2.455   0.001755 ... 
                      2.46   0.001364      2.465   0.001029       2.47   0.000751      2.475   0.000526       2.48   0.000353      2.485   0.000226 ... 
                      2.49   0.000142      2.495    9.6e-05        2.5    8.3e-05      2.505    9.7e-05       2.51   0.000134      2.515   0.000188 ... 
                      2.52   0.000256      2.525   0.000331       2.53   0.000411      2.535   0.000491       2.54   0.000569      2.545   0.000641 ... 
                      2.55   0.000706      2.555   0.000762       2.56   0.000808      2.565   0.000842       2.57   0.000865      2.575   0.000877 ... 
                      2.58   0.000877      2.585   0.000867       2.59   0.000847      2.595   0.000819        2.6   0.000783      2.605   0.000741 ... 
                      2.61   0.000693      2.615   0.000642       2.62   0.000588      2.625   0.000533       2.63   0.000478      2.635   0.000423 ... 
                      2.64    0.00037      2.645   0.000319       2.65   0.000272      2.655   0.000227       2.66   0.000187      2.665   0.000151 ... 
                      2.67   0.000119      2.675    9.2e-05       2.68    6.9e-05      2.685      5e-05       2.69    3.5e-05      2.695    2.3e-05 ... 
                       2.7    1.5e-05      2.705      1e-05       2.71      7e-06      2.715      7e-06       2.72      8e-06      2.725    1.1e-05 ... 
                      2.73    1.5e-05      2.735      2e-05       2.74    2.5e-05      2.745    3.1e-05       2.75    3.6e-05      2.755    4.1e-05 ... 
                      2.76    4.6e-05      2.765      5e-05       2.77    5.3e-05      2.775    5.6e-05       2.78    5.8e-05      2.785    5.9e-05 ... 
                      2.79    5.9e-05      2.795    5.9e-05        2.8    5.8e-05      2.805    5.6e-05       2.81    5.4e-05      2.815    5.2e-05 ... 
                      2.82    4.9e-05      2.825    4.5e-05       2.83    4.2e-05      2.835    3.8e-05       2.84    3.5e-05      2.845    3.1e-05 ... 
                      2.85    2.7e-05      2.855    2.4e-05       2.86    2.1e-05      2.865    1.8e-05       2.87    1.5e-05      2.875    1.2e-05 ... 
                      2.88      1e-05      2.885      8e-06       2.89      6e-06      2.895      5e-06        2.9      4e-06      2.905      3e-06 ... 
                      2.91      2e-06      2.915      2e-06       2.92      2e-06      2.925      1e-06       2.93      1e-06      2.935      1e-06 ... 
                      2.94      2e-06      2.945      2e-06       2.95      2e-06      2.955      2e-06       2.96      3e-06      2.965      3e-06 ... 
                      2.97      3e-06      2.975      4e-06       2.98      4e-06      2.985      4e-06       2.99      4e-06      2.995      4e-06 ... 
                         3      4e-06      3.005      4e-06       3.01      4e-06      3.015      4e-06       3.02      4e-06      3.025      4e-06 ... 
                      3.03      4e-06      3.035      4e-06       3.04      3e-06      3.045      3e-06       3.05      3e-06      3.055      3e-06 ... 
                      3.06      3e-06      3.065      2e-06       3.07      2e-06      3.075      2e-06       3.08      2e-06      3.085      2e-06 ... 
                      3.09      2e-06      3.095      1e-06        3.1      1e-06      3.105      1e-06       3.11      1e-06      3.115      1e-06 ... 
                      3.12      1e-06      3.125      1e-06       3.13      1e-06      3.135      1e-06       3.14      1e-06      3.145      1e-06 ... 
                      3.15      1e-06      3.155      1e-06       3.16      1e-06      3.165      1e-06       3.17      1e-06      3.175      1e-06 ... 
                      3.18      1e-06      3.185      1e-06       3.19      1e-06      3.195      1e-06        3.2      1e-06      3.205      1e-06 ... 
                      3.21      1e-06      3.215      1e-06       3.22      1e-06      3.225      1e-06       3.23      1e-06      3.235      1e-06 ... 
                      3.24      1e-06      3.245      1e-06       3.25      1e-06      3.255      1e-06       3.26      1e-06      3.265      1e-06 ... 
                      3.27      1e-06      3.275      1e-06       3.28      1e-06      3.285      1e-06       3.29      1e-06      3.295      1e-06 ... 
                       3.3      1e-06      3.305      1e-06       3.31      1e-06      3.315      1e-06       3.32      1e-06      3.325      1e-06 ... 
                      3.33      1e-06      3.335      1e-06       3.34      1e-06      3.345      1e-06       3.35      1e-06      3.355      1e-06 ... 
                      3.36      1e-06      3.365      1e-06       3.37      1e-06      3.375      1e-06       3.38      1e-06      3.385      1e-06 ... 
                      3.39      1e-06      3.395      1e-06        3.4      1e-06      3.405      1e-06       3.41      1e-06      3.415      1e-06 ... 
                      3.42      1e-06      3.425      1e-06       3.43      1e-06      3.435      1e-06       3.44      1e-06      3.445      1e-06 ... 
                      3.45      1e-06      3.455      1e-06       3.46      1e-06      3.465      1e-06       3.47      1e-06      3.475      1e-06 ... 
                      3.48      1e-06      3.485      1e-06       3.49      1e-06      3.495      1e-06        3.5      1e-06      3.505      1e-06 ... 
                      3.51      1e-06      3.515      1e-06       3.52      1e-06      3.525      1e-06       3.53      1e-06      3.535      1e-06 ... 
                      3.54      1e-06      3.545      1e-06       3.55      1e-06      3.555      1e-06       3.56      1e-06      3.565      1e-06 ... 
                      3.57      1e-06      3.575      1e-06       3.58      1e-06      3.585      1e-06       3.59      1e-06      3.595      1e-06 ... 
                       3.6      1e-06      3.605      1e-06       3.61      1e-06      3.615      1e-06       3.62      1e-06      3.625      1e-06 ... 
                      3.63      1e-06      3.635      1e-06       3.64      1e-06      3.645      1e-06       3.65      1e-06      3.655      1e-06 ... 
                      3.66      1e-06      3.665      1e-06       3.67      1e-06      3.675      1e-06       3.68      1e-06      3.685      1e-06 ... 
                      3.69      1e-06      3.695      1e-06        3.7      1e-06      3.705      1e-06       3.71      1e-06      3.715      1e-06 ... 
                      3.72      1e-06      3.725      1e-06       3.73      1e-06      3.735      1e-06       3.74      1e-06      3.745      1e-06 ... 
                      3.75      1e-06      3.755      1e-06       3.76      1e-06      3.765      1e-06       3.77      1e-06      3.775      1e-06 ... 
                      3.78      1e-06      3.785      1e-06       3.79      1e-06      3.795      1e-06        3.8      1e-06      3.805      1e-06 ... 
                      3.81      1e-06      3.815      1e-06       3.82      1e-06      3.825      1e-06       3.83      1e-06      3.835      1e-06 ... 
                      3.84      1e-06      3.845      1e-06       3.85      1e-06      3.855      1e-06       3.86      1e-06      3.865      1e-06 ... 
                      3.87      1e-06      3.875      1e-06       3.88      1e-06      3.885      1e-06       3.89      1e-06      3.895      1e-06 ... 
                       3.9      1e-06      3.905      1e-06       3.91      1e-06      3.915      1e-06       3.92      1e-06      3.925      1e-06 ... 
                      3.93      1e-06      3.935      1e-06       3.94      1e-06      3.945      1e-06       3.95      1e-06      3.955      1e-06 ... 
                      3.96      1e-06      3.965      1e-06       3.97      1e-06      3.975      1e-06       3.98      1e-06      3.985      1e-06 ... 
                      3.99      1e-06      3.995      1e-06          4      1e-06];
            end
            function x = load_W_on_Si()
                x = [ ...
                         0      1e+06      0.005     999146       0.01     998293      0.015     997440       0.02     996588      0.025     995735 ... 
                      0.03     994883      0.035     994030       0.04     993177      0.045     992324       0.05     991470      0.055     990615 ... 
                      0.06     989759      0.065     988901       0.07     988043      0.075     987183       0.08     986322      0.085     985458 ... 
                      0.09     984593      0.095     983726        0.1     982856      0.105     981984       0.11     981109      0.115     980232 ... 
                      0.12     979351      0.125     978467       0.13     977580      0.135     976690       0.14     975795      0.145     974897 ... 
                      0.15     973995      0.155     973088       0.16     972177      0.165     971261       0.17     970340      0.175     969414 ... 
                      0.18     968482      0.185     967545       0.19     966601      0.195     965652        0.2     964696      0.205     963734 ... 
                      0.21     962765      0.215     961788       0.22     960804      0.225     959812       0.23     958813      0.235     957804 ... 
                      0.24     956787      0.245     955761       0.25     954726      0.255     953680       0.26     952625      0.265     951559 ... 
                      0.27     950482      0.275     949394       0.28     948294      0.285     947182       0.29     946057      0.295     944918 ... 
                       0.3     943767      0.305     942600       0.31     941419      0.315     940223       0.32     939011      0.325     937781 ... 
                      0.33     936535      0.335     935271       0.34     933987      0.345     932685       0.35     931361      0.355     930017 ... 
                      0.36     928651      0.365     927261       0.37     925847      0.375     924408       0.38     922943      0.385     921450 ... 
                      0.39     919928      0.395     918376        0.4     916793      0.405     915176       0.41     913525      0.415     911837 ... 
                      0.42     910111      0.425     908344       0.43     906535      0.435     904680       0.44     902779      0.445     900827 ... 
                      0.45     898823      0.455     896762       0.46     894643      0.465     892460       0.47     890210      0.475     887888 ... 
                      0.48     885490      0.485     883011       0.49     880445      0.495     877785        0.5     875025      0.505     872157 ... 
                      0.51     869172      0.515     866060       0.52     862812      0.525     859414       0.53     855854      0.535     852116 ... 
                      0.54     848182      0.545     844033       0.55     839646      0.555     834993       0.56     830045      0.565     824765 ... 
                      0.57     819112      0.575     813034       0.58     806473      0.585     799358       0.59     791601      0.595     783097 ... 
                       0.6     773718      0.605     763303       0.61     751651      0.615     738511       0.62     723566      0.625     706409 ... 
                      0.63     686527      0.635     663263       0.64     635799      0.645     603131       0.65     564102      0.655     517518 ... 
                      0.66     462476      0.665     399012       0.67     329135      0.675     257916       0.68     193555      0.685     145094 ... 
                      0.69     118147      0.695     111885        0.7     120069      0.705     134798       0.71     149628      0.715     160617 ... 
                      0.72     165973      0.725     165326       0.73     159104      0.735     148156       0.74     133543      0.745     116425 ... 
                      0.75      98002      0.755    79450.5       0.76    61863.5      0.765    46179.1       0.77    33114.6      0.775    23116.7 ... 
                      0.78      16342      0.785      12673       0.79    11765.4      0.795    13115.8        0.8    16137.1      0.805    20226.9 ... 
                      0.81    24821.4      0.815    29432.1       0.82    33664.6      0.825    37224.8       0.83    39914.8      0.835    41623.2 ... 
                      0.84    42313.4      0.845      42010       0.85    40786.3      0.855    38752.5       0.86    36045.2      0.865    32817.5 ... 
                      0.87    29230.8      0.875    25446.3       0.88    21618.7      0.885    17890.2       0.89    14385.1      0.895    11206.3 ... 
                       0.9    8432.61      0.905     6117.7       0.91    4289.95      0.915    2953.91       0.92    2092.67      0.925    1671.08 ... 
                      0.93    1639.49      0.935    1937.82       0.94    2499.56      0.945    3255.56       0.95    4137.44      0.955    5080.38 ... 
                      0.96    6025.44      0.965     6921.2       0.97    7724.82      0.975    8402.64       0.98    8930.28      0.985    9292.35 ... 
                      0.99    9481.93      0.995    9499.74          1    9353.17      1.005    9055.28       1.01    8623.58      1.015    8078.99 ... 
                      1.02    7444.65      1.025     6744.9       1.03    6004.25      1.035    5246.55       1.04    4494.18      1.045    3767.39 ... 
                      1.05    3083.84      1.055     2458.2       1.06    1901.96      1.065    1423.28       1.07    1027.09      1.075    715.193 ... 
                      1.08    486.523      1.085    337.454       1.09    262.183      1.095    253.137        1.1    301.407      1.105    397.182 ... 
                      1.11    530.162      1.115    689.949       1.12    866.399      1.125    1049.92       1.13    1231.74      1.135    1404.08 ... 
                      1.14    1560.32      1.145    1695.09       1.15    1804.28      1.155    1885.09       1.16    1935.93      1.165     1956.4 ... 
                      1.17    1947.11      1.175    1909.65       1.18    1846.35      1.185     1760.2       1.19    1654.66      1.195    1533.52 ... 
                       1.2    1400.73      1.205    1260.28       1.21    1116.09      1.215     971.85       1.22    830.964      1.225    696.463 ... 
                      1.23    570.947      1.235    456.544       1.24    354.892      1.245    267.131       1.25     193.92      1.255    135.454 ... 
                      1.26     91.506      1.265     61.471       1.27    44.4165      1.275     39.141       1.28    44.2332      1.285    58.1324 ... 
                      1.29    79.1868      1.295     105.71        1.3     136.03      1.305     168.54       1.31    201.734      1.315    234.241 ... 
                      1.32    264.851      1.325    292.534       1.33    316.454      1.335    335.968       1.34    350.634      1.345    360.196 ... 
                      1.35    364.579      1.355    363.871       1.36    358.307      1.365    348.244       1.37    334.145      1.375    316.551 ... 
                      1.38    296.061      1.385    273.308       1.39    248.939      1.395    223.593        1.4    197.888      1.405    172.402 ... 
                      1.41    147.662      1.415     124.13       1.42    102.205      1.425    82.2064       1.43     64.381      1.435    48.8982 ... 
                      1.44    35.8537      1.445    25.2734       1.45    17.1186      1.455    11.2931       1.46    7.65097      1.465    6.00456 ... 
                      1.47    6.13365      1.475    7.79408       1.48    10.7265      1.485    14.6644       1.49    19.3422      1.495    24.5017 ... 
                       1.5    29.8986      1.505    35.3075       1.51    40.5259      1.515    45.3775       1.52    49.7146      1.525    53.4189 ... 
                      1.53    56.4019      1.535    58.6045       1.54    59.9959      1.545    60.5712       1.55    60.3495      1.555    59.3709 ... 
                      1.56    57.6935      1.565    55.3898       1.57    52.5438      1.575    49.2475       1.58    45.5974      1.585     41.692 ... 
                      1.59    37.6283      1.595    33.5001        1.6    29.3952      1.605    25.3937       1.61    21.5669      1.615    17.9758 ... 
                      1.62    14.6707      1.625    11.6909       1.63    9.06425      1.635    6.80793       1.64     4.9287      1.645    3.42377 ... 
                      1.65    2.28168      1.655    1.48342       1.66    1.00357      1.665   0.811538       1.67    0.87283      1.675    1.15025 ... 
                      1.68    1.60512      1.685    2.19836       1.69    2.89152      1.695    3.64771        1.7    4.43235      1.705    5.21381 ... 
                      1.71    5.96396      1.715    6.65852       1.72    7.27729      1.725    7.80428       1.73    8.22767      1.735    8.53975 ... 
                      1.74    8.73667      1.745    8.81816       1.75     8.7872      1.755    8.64961       1.76     8.4136      1.765    8.08937 ... 
                      1.77    7.68859      1.775    7.22398       1.78    6.70889      1.785    6.15686       1.79    5.58127      1.795    4.99499 ... 
                       1.8    4.41012      1.805    3.83772       1.81    3.28766      1.815    2.76843       1.82    2.28708      1.825     1.8492 ... 
                      1.83    1.45884      1.835    1.11864       1.84   0.829819      1.845    0.59232       1.85    0.40492      1.855   0.265362 ... 
                      1.86   0.170516      1.865   0.116534       1.87   0.099012      1.875   0.113154       1.88   0.153921      1.885   0.216182 ... 
                      1.89   0.294847      1.895   0.384985        1.9   0.481932      1.905   0.581373       1.91   0.679417      1.915    0.77265 ... 
                      1.92   0.858164      1.925   0.933587       1.93   0.997077      1.935    1.04732       1.94     1.0835      1.945    1.10529 ... 
                      1.95    1.11277      1.955    1.10642       1.96    1.08706      1.965    1.05575       1.97    1.01381      1.975   0.962722 ... 
                      1.98   0.904052      1.985   0.839445       1.99    0.77055      1.995   0.698985          2   0.626296      2.005   0.553924 ... 
                      2.01   0.483183      2.015   0.415234       2.02   0.351074      2.025   0.291525       2.03   0.237231      2.035    0.18866 ... 
                      2.04   0.146109      2.045   0.109712       2.05   0.079453      2.055   0.055181       2.06   0.036629      2.065   0.023426 ... 
                      2.07   0.015124      2.075   0.011209       2.08   0.011124      2.085   0.014286       2.09     0.0201      2.095    0.02798 ... 
                       2.1   0.037355      2.105   0.047686       2.11   0.058475      2.115   0.069271       2.12   0.079676      2.125    0.08935 ... 
                      2.13   0.098014      2.135   0.105446       2.14   0.111485      2.145   0.116026       2.15   0.119018      2.155   0.120456 ... 
                      2.16    0.12038      2.165   0.118866       2.17   0.116023      2.175   0.111984       2.18   0.106902      2.185   0.100942 ... 
                      2.19   0.094278      2.195   0.087086        2.2   0.079539      2.205   0.071803       2.21   0.064035      2.215   0.056379 ... 
                      2.22   0.048962      2.225   0.041896       2.23   0.035274      2.235    0.02917       2.24   0.023642      2.245   0.018726 ... 
                      2.25   0.014445      2.255   0.010802       2.26    0.00779      2.265   0.005385       2.27   0.003555      2.275   0.002258 ... 
                      2.28   0.001444      2.285   0.001059       2.29   0.001046      2.295   0.001345        2.3   0.001896      2.305   0.002642 ... 
                      2.31   0.003526      2.315   0.004496       2.32   0.005506      2.325   0.006511       2.33   0.007475      2.335   0.008366 ... 
                      2.34   0.009159      2.345   0.009834       2.35   0.010378      2.355   0.010781       2.36   0.011039      2.365   0.011153 ... 
                      2.37   0.011129      2.375   0.010972       2.38   0.010695      2.385    0.01031       2.39   0.009832      2.395   0.009276 ... 
                       2.4   0.008658      2.405   0.007993       2.41   0.007299      2.415    0.00659       2.42    0.00588      2.425   0.005181 ... 
                      2.43   0.004506      2.435   0.003863       2.44   0.003261      2.445   0.002706       2.45   0.002203      2.455   0.001755 ... 
                      2.46   0.001364      2.465   0.001029       2.47   0.000751      2.475   0.000526       2.48   0.000353      2.485   0.000226 ... 
                      2.49   0.000142      2.495    9.6e-05        2.5    8.3e-05      2.505    9.7e-05       2.51   0.000134      2.515   0.000188 ... 
                      2.52   0.000256      2.525   0.000331       2.53   0.000411      2.535   0.000491       2.54   0.000569      2.545   0.000641 ... 
                      2.55   0.000706      2.555   0.000762       2.56   0.000808      2.565   0.000842       2.57   0.000865      2.575   0.000877 ... 
                      2.58   0.000877      2.585   0.000867       2.59   0.000847      2.595   0.000819        2.6   0.000783      2.605   0.000741 ... 
                      2.61   0.000693      2.615   0.000642       2.62   0.000588      2.625   0.000533       2.63   0.000478      2.635   0.000423 ... 
                      2.64    0.00037      2.645   0.000319       2.65   0.000272      2.655   0.000227       2.66   0.000187      2.665   0.000151 ... 
                      2.67   0.000119      2.675    9.2e-05       2.68    6.9e-05      2.685      5e-05       2.69    3.5e-05      2.695    2.3e-05 ... 
                       2.7    1.5e-05      2.705      1e-05       2.71      7e-06      2.715      7e-06       2.72      8e-06      2.725    1.1e-05 ... 
                      2.73    1.5e-05      2.735      2e-05       2.74    2.5e-05      2.745    3.1e-05       2.75    3.6e-05      2.755    4.1e-05 ... 
                      2.76    4.6e-05      2.765      5e-05       2.77    5.3e-05      2.775    5.6e-05       2.78    5.8e-05      2.785    5.9e-05 ... 
                      2.79    5.9e-05      2.795    5.9e-05        2.8    5.8e-05      2.805    5.6e-05       2.81    5.4e-05      2.815    5.2e-05 ... 
                      2.82    4.9e-05      2.825    4.5e-05       2.83    4.2e-05      2.835    3.8e-05       2.84    3.5e-05      2.845    3.1e-05 ... 
                      2.85    2.7e-05      2.855    2.4e-05       2.86    2.1e-05      2.865    1.8e-05       2.87    1.5e-05      2.875    1.2e-05 ... 
                      2.88      1e-05      2.885      8e-06       2.89      6e-06      2.895      5e-06        2.9      4e-06      2.905      3e-06 ... 
                      2.91      2e-06      2.915      2e-06       2.92      2e-06      2.925      1e-06       2.93      1e-06      2.935      1e-06 ... 
                      2.94      2e-06      2.945      2e-06       2.95      2e-06      2.955      2e-06       2.96      3e-06      2.965      3e-06 ... 
                      2.97      3e-06      2.975      4e-06       2.98      4e-06      2.985      4e-06       2.99      4e-06      2.995      4e-06 ... 
                         3      4e-06      3.005      4e-06       3.01      4e-06      3.015      4e-06       3.02      4e-06      3.025      4e-06 ... 
                      3.03      4e-06      3.035      4e-06       3.04      3e-06      3.045      3e-06       3.05      3e-06      3.055      3e-06 ... 
                      3.06      3e-06      3.065      2e-06       3.07      2e-06      3.075      2e-06       3.08      2e-06      3.085      2e-06 ... 
                      3.09      2e-06      3.095      1e-06        3.1      1e-06      3.105      1e-06       3.11      1e-06      3.115      1e-06 ... 
                      3.12      1e-06      3.125      1e-06       3.13      1e-06      3.135      1e-06       3.14      1e-06      3.145      1e-06 ... 
                      3.15      1e-06      3.155      1e-06       3.16      1e-06      3.165      1e-06       3.17      1e-06      3.175      1e-06 ... 
                      3.18      1e-06      3.185      1e-06       3.19      1e-06      3.195      1e-06        3.2      1e-06      3.205      1e-06 ... 
                      3.21      1e-06      3.215      1e-06       3.22      1e-06      3.225      1e-06       3.23      1e-06      3.235      1e-06 ... 
                      3.24      1e-06      3.245      1e-06       3.25      1e-06      3.255      1e-06       3.26      1e-06      3.265      1e-06 ... 
                      3.27      1e-06      3.275      1e-06       3.28      1e-06      3.285      1e-06       3.29      1e-06      3.295      1e-06 ... 
                       3.3      1e-06      3.305      1e-06       3.31      1e-06      3.315      1e-06       3.32      1e-06      3.325      1e-06 ... 
                      3.33      1e-06      3.335      1e-06       3.34      1e-06      3.345      1e-06       3.35      1e-06      3.355      1e-06 ... 
                      3.36      1e-06      3.365      1e-06       3.37      1e-06      3.375      1e-06       3.38      1e-06      3.385      1e-06 ... 
                      3.39      1e-06      3.395      1e-06        3.4      1e-06      3.405      1e-06       3.41      1e-06      3.415      1e-06 ... 
                      3.42      1e-06      3.425      1e-06       3.43      1e-06      3.435      1e-06       3.44      1e-06      3.445      1e-06 ... 
                      3.45      1e-06      3.455      1e-06       3.46      1e-06      3.465      1e-06       3.47      1e-06      3.475      1e-06 ... 
                      3.48      1e-06      3.485      1e-06       3.49      1e-06      3.495      1e-06        3.5      1e-06      3.505      1e-06 ... 
                      3.51      1e-06      3.515      1e-06       3.52      1e-06      3.525      1e-06       3.53      1e-06      3.535      1e-06 ... 
                      3.54      1e-06      3.545      1e-06       3.55      1e-06      3.555      1e-06       3.56      1e-06      3.565      1e-06 ... 
                      3.57      1e-06      3.575      1e-06       3.58      1e-06      3.585      1e-06       3.59      1e-06      3.595      1e-06 ... 
                       3.6      1e-06      3.605      1e-06       3.61      1e-06      3.615      1e-06       3.62      1e-06      3.625      1e-06 ... 
                      3.63      1e-06      3.635      1e-06       3.64      1e-06      3.645      1e-06       3.65      1e-06      3.655      1e-06 ... 
                      3.66      1e-06      3.665      1e-06       3.67      1e-06      3.675      1e-06       3.68      1e-06      3.685      1e-06 ... 
                      3.69      1e-06      3.695      1e-06        3.7      1e-06      3.705      1e-06       3.71      1e-06      3.715      1e-06 ... 
                      3.72      1e-06      3.725      1e-06       3.73      1e-06      3.735      1e-06       3.74      1e-06      3.745      1e-06 ... 
                      3.75      1e-06      3.755      1e-06       3.76      1e-06      3.765      1e-06       3.77      1e-06      3.775      1e-06 ... 
                      3.78      1e-06      3.785      1e-06       3.79      1e-06      3.795      1e-06        3.8      1e-06      3.805      1e-06 ... 
                      3.81      1e-06      3.815      1e-06       3.82      1e-06      3.825      1e-06       3.83      1e-06      3.835      1e-06 ... 
                      3.84      1e-06      3.845      1e-06       3.85      1e-06      3.855      1e-06       3.86      1e-06      3.865      1e-06 ... 
                      3.87      1e-06      3.875      1e-06       3.88      1e-06      3.885      1e-06       3.89      1e-06      3.895      1e-06 ... 
                       3.9      1e-06      3.905      1e-06       3.91      1e-06      3.915      1e-06       3.92      1e-06      3.925      1e-06 ... 
                      3.93      1e-06      3.935      1e-06       3.94      1e-06      3.945      1e-06       3.95      1e-06      3.955      1e-06 ... 
                      3.96      1e-06      3.965      1e-06       3.97      1e-06      3.975      1e-06       3.98      1e-06      3.985      1e-06 ... 
                      3.99      1e-06      3.995      1e-06          4      1e-06]; 
            end
        end
        
        function           demo_pole_figure()
            clear; clc; import am_mbe.* am_lib.* am_dft.*
            % define photon energy and angles
            hv = get_atomic_emission_line_energy(get_atomic_number('Cu'),'kalpha1');

            % load 
            % d = xrdmlread('ABM170804-09_YSZ(004)_PF.xrdml');
            % d = xrdmlread('ABM170804-09_BFO(004)_PF.xrdml');
            d = xrdmlread('ABM170804-15_YSZ(004)_PF.xrdml');
            % d = xrdmlread('ABM170804-17_LFO(112)_PF.xrdml');

            % reorient phi 
            phi_align=-4.5; chi=d.Chi-min(d.Chi); phi=d.Phi-min(d.Phi)+phi_align; data=d.data;
            % define and apply convolution window
            w2_ = @(N,alpha,w1_) w1_(N,alpha).*w1_(N,alpha).'; data = conv2(data,w2_(10,20,@gaussw_),'same');
            % plot pole figure
            plot_pole_figure(phi,chi,(data)); daspect([1 1 1])

            % annotate?
            if false
                [x2,y2] = ginput(1);
                annotate_pole_figure_reference(x2,y2,'chi','color','w','linewidth',1);
            end

            % angle between two points?
            if false
                [x2,y2] = ginput(1);
                annotate_pole_figure_reference(x2,y2,'chi','color','w','linewidth',1);
            end
            annotate_pole_figure_angle

        end
        
       
        % XRR
        
        function            analyze_xrr_with_fft(th,I,hv,thc)
            %
            % beta = analyze_xrr_with_fft(th,I,hv,thc)
            % 
            % th         [deg]          incident x-ray angle
            % I          [a.u.]         xrr intensity
            % hv         [eV]           photon energy
            % thc        [deg]          (optional) critical angle
            %
            % Example:
            % ex_ = th<1.8;
            % analyze_xrr_with_fft(th(ex_),intensity(ex_),hv,0.36)
            % analyze_xrr_with_fft(th(ex_),intensity(ex_),hv)
            %

            import am_mbe.* am_lib.*

            if nargin < 4 || isempty(thc)
                qc = [];
            else
                qc = get_kz(thc,hv);
            end

            % get wavevector
            qz = get_kz(th,hv);
            % subtract critical wavevector
            if isempty(qc); [~,c]=max(-diff(I)./diff(th)); qc = qz(c); end
            q = sqrt(qz.^2 - qc.^2); Fq=I(q>0); q=q(q>0); nqs = numel(q);
            % resample Fq,q on equidistant intervals
            qe = linspace(min(q),max(q),nqs).'; Fq = interp1(q,Fq,qe); q = qe; 
            % apply background correction
            Fq = (Fq.*q.^4-mean(Fq.*q.^4)) .* tukeyw_(nqs,0.90);
            % evalute DFT
            x  = [0:0.5:200]; 
            K  = exp(-2i*pi*x(:).*q(:).');
            Fx = K*Fq(:);
            % evaluate FFT
            nxs=2^10;
            x_fft = [0:nxs-1]/(nxs)/(q(2)-q(1)); x_fft = x_fft([1:floor(nxs/2)]); 
            F_fft = fft(Fq,2^10);                F_fft = F_fft([1:floor(nxs/2)]);
            % IMPROVISED CORRECTION
            % IMPROVISED CORRECTION
                x_fft = x_fft/2;
                x = x/2;
            % IMPROVISED CORRECTION
            % IMPROVISED CORRECTION            
            % plot th, Fx, and Fq
            subplot(3,1,1); semilogy(th, I); xlabel('\theta [deg]'); ylabel('Intensity [a.u.]'); axis tight;
            subplot(3,1,2); plot(q, Fq); xlabel('(q^2 - q_c^2)^{1/2} [1/nm]'); ylabel('Intensity [a.u.]'); axis tight;
            subplot(3,1,3); semilogy(x, abs(Fx).^2,'-', x_fft, abs(F_fft).^2,'.'); xlabel('x [nm]'); ylabel('|FFT|^2 [a.u.]'); axis tight; xlim([0 200]);
        end

        function [x]      = analyze_xrr_with_fit(th,intensity,hv,layer,x0,ub,lb,isfixed,domain)
            import am_mbe.* am_lib.* am_dft.*
            
            % if window is defined, crop and filter
            if nargin > 8
                ex_ = and( th < max(domain) , th > min(domain) );
                th = th(ex_); intensity = intensity(ex_);
            end
            
            % get dielectric contributions
            nlayers = numel(layer);
            for i = 1:nlayers; xray_refractive_index(:,i) = get_xray_refractive_index(layer(i), hv, get_kz(th,hv)); end
            
            % x = [thickness,filling,roughness,I0,background]
            nlayers = numel(layer);
            simulate_ = @(x) simulate_xrr(...
                xray_refractive_index, th, hv,...
                x(0*nlayers+[1:nlayers]),...
                x(1*nlayers+[1:nlayers]),...
                x(2*nlayers+[1:nlayers]),...
                x(3*nlayers+1))*x(end-1)+x(end);
            % define rescaling
            fscale_= @(x)   [x(1:(3*nlayers+1)),log(x((3*nlayers+2):end))];
            rscale_= @(x)   [x(1:(3*nlayers+1)),exp(x((3*nlayers+2):end))];
            % scale lower and upper bounds
            lb = fscale_(lb); ub = fscale_(ub);
            % define objective function: robust + pearson's correlation coefficient
            cost_  = @(x) sum(abs( log(simulate_(rscale_(x))) - log(intensity(:)) )) ;

            % optimization options
            opts_hybrid_ = optimoptions(...
                @fmincon,'Display','off',...
                         'MaxFunctionEvaluations',1E3,...
                         'MaxIterations',1E3,...
                         'StepTolerance',1E-18,...
                         'FunctionTolerance',1E-18,...
                         'Algorithm','active-set');
            opts_ = optimoptions(@ga,'PopulationSize',300, ...
                                     'InitialPopulationMatrix',x0(~isfixed), ... 
                                     'EliteCount',2, ...
                                     'FunctionTolerance',1, ...
                                     'Display','off',...
                                     'PlotFcns',@plot_func_ga_, ... % {@gaplotrange,@gaplotbestf},... % 
                                     'HybridFcn',{@fmincon,opts_hybrid_});
            % perform optimization
            [x,~] = ga_(cost_,x0,isfixed,[],[],[],[],lb(~isfixed),ub(~isfixed),[],opts_); x = rscale_(x);
            
            % plot final result
                semilogy(th,intensity,'.',th,simulate_(x),'--'); axis tight; xlabel('\theta [deg]'); ylabel('Intensity [a.u.]');
                if nlayers==2 % title
                    title(sprintf('thickness = %.2f nm; film density %.2f g/cm3; substrate density %.2f g/cm3; \n film roughness = %.2f nm, substrate roughness = %.2f nm',...
                        x(1),x(3)*get_cell_mass_density(layer(1)),x(4)*get_cell_mass_density(layer(2)),x(5),x(6)));
                end
            % plot bounds 
                switch nlayers % define labels
                    case 2; label = {'T1','T2','D1','D2','R1','R2','W','I','B'};
                    case 3; label = {'T1','T2','T3','D1','D2','D3','R1','R2','R3','W','I','B'};
                end
                % bounds
                axes('position',[0.4 0.6 0.45 0.25]);
                a = 1:sum(~isfixed); b = (x(~isfixed)-lb(~isfixed))./(ub(~isfixed)-lb(~isfixed)); plot(a,b,'.-','markersize',20); 
                h=text(a,b+0.05,strread(sprintf('%0.3g\n',x(~isfixed)),'%s'),'HorizontalAlignment','left'); set(h,'rotation',90);
                ylim([0 1]); set(gca,'YTick',[0 1],'YTickLabel',{'LB','UB'}); set(gca,'XTickLabel',label(~isfixed)); 
            
            function state = plot_func_ga_(~,state,flag,~)
                switch flag
                    % Plot initialization
                    case 'init'
                        clf; figure(1); set(gcf,'color','w');
                    case 'iter'
                        % find best population
                        [~,j]=min(state.Score);
                        % reconstruct full vector
                        f = find( isfixed); xf = x0(f);
                        l = find(~isfixed); xl = state.Population(j,:);
                        x([f,l]) = [xf,xl];
                        % plot it
                        semilogy(th,simulate_(rscale_(x)),th,intensity); 
                        % title
                        title(sprintf('(generation = %i)',state.Generation)); 
                        % state.Population(i,3), 2*asind(1239.842/hv/(4*pi)*state.Population(i,2))
                        axis tight; xlabel('\theta [deg]'); ylabel('Intensity [a.u.]');
                        ylim([min(intensity),max(intensity)]);
                end
            end
        end
        
        % w2th
        
        function            analyze_w2th_with_fft(th2,intensity,hv,domain)
            %
            % beta = analyze_xrd_with_fft(th,xrr,hv,domain)
            % 
            % th         [deg]          incident x-ray angle
            % xintensity [a.u.]         xrr intensity
            % hv         [eV]           photon energy
            % domain     [deg]          (optional) [min max]
            %
            % Example:
            % ex_ = th<1.8;
            % analyze_xrr_with_fft(th(ex_),intensity(ex_),hv,0.36)
            % analyze_xrr_with_fft(th(ex_),intensity(ex_),hv)
            %

            import am_mbe.*
            
            % resample intensity and q on equidistant intervals
            q = get_kz(th2(:)/2,hv); qe = linspace(min(q),max(q),numel(q)).'; Fq = interp1(q,intensity,qe); q = qe; th2 = get_th(q,hv)*2;
            % if window is defined, crop and filter
            if nargin > 3; if ~isempty(domain)
                ex_ = and( th2 < max(domain) , th2 > min(domain) );
                th2 = th2(ex_); q = q(ex_); Fq = Fq(ex_); Fq = Fq .* tukey_(numel(Fq),0.90); 
            end; end
            % evalute DFT
            x  = [0:0.5:200]; 
            K  = exp(-2i*pi*x(:).*q(:).');
            Fx = K*Fq(:);
            % evaluate FFT
            nxs=2^10;
            x_fft = [0:nxs-1]/(nxs)/(q(2)-q(1)); x_fft = x_fft([1:floor(nxs/2)]);
            F_fft = fft(Fq,2^10);                F_fft = F_fft([1:floor(nxs/2)]);
            % plot th, Fx, and Fq
            subplot(2,1,1); semilogy(th2,Fq,'-'); xlabel('2\theta [deg]'); ylabel('Intensity [a.u.]'); axis tight;
            subplot(2,1,2); semilogy(x, abs(Fx).^2,'-', x_fft, abs(F_fft).^2,'.'); xlabel('x [nm]'); ylabel('|FFT|^2 [a.u.]'); axis tight; xlim([0 200]);
        end
        
        function [d,th2c] = analyze_w2th_with_fit(th2,intensity,hv,domain,profile)
            %
            % beta = analyze_xrd_with_fit(th,xrr,hv)
            % 
            % th         [deg]          incident x-ray angle
            % xintensity [a.u.]         xrr intensity
            % hv         [eV]           photon energy
            % domain     [deg]          (optional) [min max]
            %

            import am_mbe.* am_lib.*
           
            % if window is defined, crop
            if nargin > 3 || ~isempty(domain)
                ex_ = and( th2 < max(domain) , th2 > min(domain) ); th2 = th2(ex_); intensity = intensity(ex_);
            end
            if nargin < 5
                profile='pvoigt'; 
            end
            
            % resample intensity and q on equidistant intervals
            q = get_kz(th2(:)/2,hv); qe = linspace(min(q),max(q),numel(q)).'; 
            intensity = interp1(q,intensity,qe); intensity(intensity==0)=min(intensity(intensity~=0));
            q = qe; th2 = 2*get_th(q,hv);
            
            % perform fit
            [c,f] = fit_peak_(q,intensity,profile);
            
            % thickness (or width) and maximum
            switch profile
                case {'sinc+pvoigt','sinc','pvoigt'}
                    d = 2*pi./c(3); th2c = 2*get_th(c(2),hv);
                otherwise
                    asdfsd 
                    % function parameters are not defined
            end
            
            semilogy(th2,f,th2,intensity); axis tight; xlabel('2\theta [deg]'); ylabel('Intensity [a.u.]');
            title(sprintf('thickness (or width) = %.2f nm; 2\\theta_c = %.3f deg',d,th2c));
        end


        % RSM 
        
        function             plot_xrd_diffraction_plane_accessible(hv)
            import am_mbe.*
            % generate accessible-region
            N = 50; alpha_i=zeros(N); alpha_f=zeros(N);
            alpha_i = repmat(linspace(0,180,N),N,1); 
            for i = 1:N; alpha_f(:,i) = linspace(0,180-alpha_i(1,i),N); end
            w = alpha_i; th2 = alpha_i+alpha_f;
            % convert to reciprocal coordinates
            [kx,kz] = angle2kxkz(w,th2,hv);
            % plot 
            h = surf(kx,kz,-ones(N),'facecolor','w');
        end


        % pole figures
        
        function [h]       = plot_pole_figure(phi,chi,data,flag)
            
            import am_lib.*
            
            if nargin < 4; flag = 'phi,chi'; end
            
            % apply PBC: copy first three columns at the end
            m = numel(phi); phi(m+[1:3]) = phi([1:3]); data(:,m+[1:3])=data(:,[1:3]); 
            % make mesh
            [chi,phi]=ndgrid(chi,phi); [x,y] = pol2cartd_(phi,cotd(90-chi/2));
            
            % plot
            figure(1);clf;set(gcf,'color','w');
            h = contourf(x,y,data,25,'edgecolor','none'); 
            view([0 0 1]); axis off; daspect([1 1 1]);
            
            if contains(flag,'phi')
                % draw constant-chi lines
                clist = [15 30 45 60 75 90]; slist={'-','--'};
                for i = 1:numel(clist)
                    [x,y] = pol2cartd_([0:5:360]+17/2,cotd(90-clist(i)/2)); 
                    line(x,y,'linestyle',slist{mod(i,2)+1},'color','k'); 
                    text(x(1),y(1),sprintf(' %i',clist(i)));
                end
            end
            
            if contains(flag,'chi')
                % draw constant-phi lines
                clist = [0 90 180 270]+[15 30 45 60 75 90].'; slist={'-.',':'};
                for i = 1:numel(clist)
                    [x,y] = pol2cartd_(clist(i),cotd(90-[0,90]/2));
                    line(x,y,'linestyle',slist{mod(i,2)+1},'color','k'); 
                    [x,y] = pol2cartd_(clist(i),cotd(90-[90]/2)*1.07);
                    text(x,y,sprintf('%i',clist(i)),'HorizontalAlignment','center');
                end
            end
        end
        
        function [angle]   = annotate_pole_figure_angle()
            import am_lib.*
            % get points
            [x2,y2]=ginput(2);
            % convert coordinates
            [phi,r]=cart2pold_(x2,y2); chi = 2*(90-acotd(r)); [x3,y3,z3]=sph2cartd_(phi,chi,1);
            % compute angle
            v1 = [x3(1),y3(1),z3(1)]; v2 = [x3(2),y3(2),z3(2)]; angle = acosd( dot(v1,v2)./norm(v1)./norm(v2) );
            % get the trajectory and label the angle
            trajectory = linspacen_(v1.',v2.',100); trajectory = trajectory./normc_(trajectory);
            % convert coordinates
            [phi,chi,~]= cart2sphd_(trajectory(1,:),trajectory(2,:),trajectory(3,:)); [x2,y2] = pol2cartd_(phi,cotd(90-chi/2));
            % plot results
            line(x2,y2,'color','w','linewidth',2); text(x2(end/2),y2(end/2),sprintf('%.2f',angle),'color','w','fontweight','bold')
        end
        
        function             annotate_pole_figure_reference(x2,y2,flag,varargin)
            import am_lib.*
            
            if nargin < 3; flag = 'phi,chi'; end
            
            % get reference vector in cartesian coordinates
            [phi,r]=cart2pold_(x2,y2); chi = 2*(90-acotd(r)); [x3,y3,z3]=sph2cartd_(phi,chi,1); v1 = [x3(1),y3(1),z3(1)]; 
            % find transformation matrix which aligns v1 with z
            R = rot_align_(v1,[0,0,1]); 
            
            if contains(flag,'phi')
                % build constant-phi grid
                phi_list = [0 90 180 270]+[15 30 45 60 75 90].'; phi_list=phi_list(:);
                chi_list = linspace(0,90,2000);%[15 30 45 60 75 90]; 
                m = numel(phi_list); n = numel(chi_list);
                [x3,y3,z3] = sph2cartd_(phi_list,chi_list,ones(m,n));
                % draw constant-chi lines
                v2 = inv(R)*[x3(:),y3(:),z3(:)].';
                % get phi and chi in transformed basis
                [phi,chi,~]=cart2sphd_(v2(1,:),v2(2,:),v2(3,:)); phi = reshape(phi,[m,n]); chi = reshape(chi,[m,n]);
                % draw grid
                slist={'-.','-.'};
                for i = 1:m
                    [x,y] = pol2cartd_(phi(i,:),cotd(90-chi(i,:)/2)); 
                    line(x,y,'linestyle',slist{mod(i,2)+1},varargin{:}); 
                    text(x(end/2),y(end/2),sprintf(' %i',phi_list(i)),'color','w');
                end
            end
            
            if contains(flag,'chi')
                % build constant-chi grid
                phi_list = linspace(0,360,1000).'; phi_list=phi_list(:);
                chi_list = [0:10:80]; 
                m = numel(phi_list); n = numel(chi_list);
                [x3,y3,z3] = sph2cartd_(phi_list,chi_list,ones(m,n));
                % draw constant-chi lines
                v2 = inv(R)*[x3(:),y3(:),z3(:)].';
                % get phi and chi in transformed basis
                [phi,chi,~]=cart2sphd_(v2(1,:),v2(2,:),v2(3,:)); phi = reshape(phi,[m,n]); chi = reshape(chi,[m,n]);
                % draw grid
                slist={'-','-'}; j = round(n);
                for i = 1:n
                    [x,y] = pol2cartd_(phi(:,i),cotd(90-chi(:,i)/2)); 
                    line(x,y,'linestyle',slist{mod(i,2)+1},varargin{:}); 
                    text(x(j),y(j),sprintf(' %i',90-chi_list(i)),'color','w');
                end
            end
        end

        
        % structural

        function [h]       = plot_ibs_1D(ibs,labels,label_threshold,varargin)
            import am_lib.* am_dft.* am_mbe.*
            % set default maximum range in plot
            max_th2_range = 110;
            %
            yscaler_ = @(x) x.^0.1;
            yscaler_ = @(x) x;
            % set threshold
            if nargin<3 || isempty(label_threshold); label_threshold = 0; end
            if nargin<2 || isempty(labels); labels = cell(1,numel(ibs)); end
            % number of bragg structures (one for each cell)
            nibss=numel(ibs);
            % plot results
            if nibss>1
                clist = am_lib.color_(nibss).';
                for j = 1:nibss
                    ax(j) = axes('position',[0.025 (0.1+0.87*(j-1)/nibss) 0.95 0.85/nibss]);
                    h=plot_ibs_1D(ibs(j),[],label_threshold,'color',clist(:,j)); 
                    if j~=1; set(gca,'XTickLabel',[]); xlabel(''); end
                    % set y axis label properties
                    ax(j).YLabel.String=labels{j};
                    ax(j).YLabel.Color=clist(:,j);
                end
                linkaxes(ax);
            else
                % plot Bragg peaks
                set(gcf,'color','w'); 
                h=hggroup;
                for i = 1:ibs.nks
                    th2 = 2*get_th(norm(ibs.recbas*ibs.k(:,i)),ibs.hv);
                    if th2 < max_th2_range
                        line([th2,th2],[0,yscaler_(ibs.Fk2(i))],'linewidth',2,varargin{:},'Parent',h);
                        if ibs.Fk2(i) > label_threshold
                            % text(th2,ibs.Fk2(i),sprintf('  [%i%i%i]  %.3f^\\circ  %i', ibs.k(:,i),th2,ibs.w(i)),'Parent',h);
                            text(th2,yscaler_(ibs.Fk2(i)),sprintf('  [%i%i%i]', ibs.k(:,i)),varargin{:},'Parent',h);
                        end
                    end
                end
                box on; xlabel('2\theta [deg]'); xlim([5 max_th2_range]); ylim([0 yscaler_(120)]); %xlabel('intensity [a.u.]');
                set(gca,'XTick',[0:10:max_th2_range]); set(gca,'YTick',[]); grid on; set(gca,'YMinorGrid','on');
            end
            H=findobj(gca,'Type','text');
            set(H,'Rotation',60);
        end
        
        function [h]       = plot_ibs_2D(ibs)
            % [uc,~,~]=load_cell('material','SrTiO3');
            % [bragg] = get_bragg_poly_rings(uc,hv);
            % [h]     = plot_bragg_poly_rings(bragg,'linewidth',1.5);
            import am_mbe.*
            % include edge points 
            N = 201; euler = exp(2i*pi*[0:N]/N);
            x = real(euler);y = imag(euler); h=hggroup;
            for i = 1:ibs.nks
                r = norm(ibs.recbas*ibs.k(:,i));
                line(r*x,r*y,'color','r','linewidth',log10(ibs.Fk2(i)+1)/1.5+0.5,'Parent',h)
                text(0,r,sprintf('%i %i %i',ibs.k(:,i)),'HorizontalAlignment','center','BackgroundColor','w','EdgeColor','r','Parent',h);
            end
        end
        
        function [h]       = plot_fbs_2D(fbs,v1,v2,varargin)
            import am_lib.*
            % see which points lie on the plane
            for i = 1:fbs.nks
                if eq_(det([v1(:),v2(:),fbs.k(:,i)]),0)
                    ex_(i) = true;
                else
                    ex_(i) = false;
                end
            end
            % exclude points not on the line
            fbs.k = fbs.k(:,ex_); fbs.Fk2 = fbs.Fk2(ex_); 
            fbs.x = v1*fbs.recbas*fbs.k/norm(v1); fbs.y = v2*fbs.recbas*fbs.k/norm(v2);
            fbs.b2i = fbs.b2i(ex_); fbs.w = fbs.w(ex_); fbs.nks = sum(ex_); 
            % plot points
            h=hggroup;
            hold on; scatter(fbs.x,fbs.y,log10(fbs.Fk2+1)*50,'filled','linewidth',2,varargin{:},'Parent',h); hold off;
            for i = 1:fbs.nks
                text(fbs.x(i),fbs.y(i)+0.5,sprintf('%i %i %i',fbs.k(:,i)),'HorizontalAlignment','center','BackgroundColor','w','EdgeColor','b');
            end
        end
        
    end
    
end














